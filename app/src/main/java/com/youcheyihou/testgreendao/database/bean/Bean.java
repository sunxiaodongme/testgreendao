package com.youcheyihou.testgreendao.database.bean;

import com.youcheyihou.testgreendao.database.dao.BeanDao;
import com.youcheyihou.testgreendao.database.dao.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "bean_table".
 */
public class Bean {

    private long id;
    private Integer int_field;
    private Long long_field;
    private Short short_field;
    private Float float_field;
    private Double double_field;
    private Byte byte_field;
    private byte[] byte_array_field;
    private String string_field;
    private Boolean boolean_field;
    private java.util.Date date_field;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BeanDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Bean() {
    }

    public Bean(long id) {
        this.id = id;
    }

    public Bean(long id, Integer int_field, Long long_field, Short short_field, Float float_field, Double double_field, Byte byte_field, byte[] byte_array_field, String string_field, Boolean boolean_field, java.util.Date date_field) {
        this.id = id;
        this.int_field = int_field;
        this.long_field = long_field;
        this.short_field = short_field;
        this.float_field = float_field;
        this.double_field = double_field;
        this.byte_field = byte_field;
        this.byte_array_field = byte_array_field;
        this.string_field = string_field;
        this.boolean_field = boolean_field;
        this.date_field = date_field;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBeanDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Integer getInt_field() {
        return int_field;
    }

    public void setInt_field(Integer int_field) {
        this.int_field = int_field;
    }

    public Long getLong_field() {
        return long_field;
    }

    public void setLong_field(Long long_field) {
        this.long_field = long_field;
    }

    public Short getShort_field() {
        return short_field;
    }

    public void setShort_field(Short short_field) {
        this.short_field = short_field;
    }

    public Float getFloat_field() {
        return float_field;
    }

    public void setFloat_field(Float float_field) {
        this.float_field = float_field;
    }

    public Double getDouble_field() {
        return double_field;
    }

    public void setDouble_field(Double double_field) {
        this.double_field = double_field;
    }

    public Byte getByte_field() {
        return byte_field;
    }

    public void setByte_field(Byte byte_field) {
        this.byte_field = byte_field;
    }

    public byte[] getByte_array_field() {
        return byte_array_field;
    }

    public void setByte_array_field(byte[] byte_array_field) {
        this.byte_array_field = byte_array_field;
    }

    public String getString_field() {
        return string_field;
    }

    public void setString_field(String string_field) {
        this.string_field = string_field;
    }

    public Boolean getBoolean_field() {
        return boolean_field;
    }

    public void setBoolean_field(Boolean boolean_field) {
        this.boolean_field = boolean_field;
    }

    public java.util.Date getDate_field() {
        return date_field;
    }

    public void setDate_field(java.util.Date date_field) {
        this.date_field = date_field;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return "id:" + id + ",int_field:" + int_field + ",long_field:" + long_field + ",short_field:" + short_field
                + ",float_field:" + float_field + ",double_field:" + double_field + ",byte_field:" + byte_field + ",byte_array_field:"
                + byte_array_field + ",string_field:" + string_field + ",boolean_field:" + boolean_field + ",date_field:" + date_field;
    }

    // KEEP METHODS END

}
