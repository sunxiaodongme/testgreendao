package com.youcheyihou.testgreendao.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.youcheyihou.testgreendao.database.bean.Bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "bean_table".
*/
public class BeanDao extends AbstractDao<Bean, Long> {

    public static final String TABLENAME = "bean_table";

    /**
     * Properties of entity Bean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Int_field = new Property(1, Integer.class, "int_field", false, "INT_FIELD");
        public final static Property Long_field = new Property(2, Long.class, "long_field", false, "LONG_FIELD");
        public final static Property Short_field = new Property(3, Short.class, "short_field", false, "SHORT_FIELD");
        public final static Property Float_field = new Property(4, Float.class, "float_field", false, "FLOAT_FIELD");
        public final static Property Double_field = new Property(5, Double.class, "double_field", false, "DOUBLE_FIELD");
        public final static Property Byte_field = new Property(6, Byte.class, "byte_field", false, "BYTE_FIELD");
        public final static Property Byte_array_field = new Property(7, byte[].class, "byte_array_field", false, "BYTE_ARRAY_FIELD");
        public final static Property String_field = new Property(8, String.class, "string_field", false, "STRING_FIELD");
        public final static Property Boolean_field = new Property(9, Boolean.class, "boolean_field", false, "BOOLEAN_FIELD");
        public final static Property Date_field = new Property(10, java.util.Date.class, "date_field", false, "DATE_FIELD");
    };

    private DaoSession daoSession;


    public BeanDao(DaoConfig config) {
        super(config);
    }
    
    public BeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"bean_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"INT_FIELD\" INTEGER," + // 1: int_field
                "\"LONG_FIELD\" INTEGER," + // 2: long_field
                "\"SHORT_FIELD\" INTEGER," + // 3: short_field
                "\"FLOAT_FIELD\" REAL," + // 4: float_field
                "\"DOUBLE_FIELD\" REAL," + // 5: double_field
                "\"BYTE_FIELD\" INTEGER," + // 6: byte_field
                "\"BYTE_ARRAY_FIELD\" BLOB," + // 7: byte_array_field
                "\"STRING_FIELD\" TEXT," + // 8: string_field
                "\"BOOLEAN_FIELD\" INTEGER," + // 9: boolean_field
                "\"DATE_FIELD\" INTEGER);"); // 10: date_field
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"bean_table\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer int_field = entity.getInt_field();
        if (int_field != null) {
            stmt.bindLong(2, int_field);
        }
 
        Long long_field = entity.getLong_field();
        if (long_field != null) {
            stmt.bindLong(3, long_field);
        }
 
        Short short_field = entity.getShort_field();
        if (short_field != null) {
            stmt.bindLong(4, short_field);
        }
 
        Float float_field = entity.getFloat_field();
        if (float_field != null) {
            stmt.bindDouble(5, float_field);
        }
 
        Double double_field = entity.getDouble_field();
        if (double_field != null) {
            stmt.bindDouble(6, double_field);
        }
 
        Byte byte_field = entity.getByte_field();
        if (byte_field != null) {
            stmt.bindLong(7, byte_field);
        }
 
        byte[] byte_array_field = entity.getByte_array_field();
        if (byte_array_field != null) {
            stmt.bindBlob(8, byte_array_field);
        }
 
        String string_field = entity.getString_field();
        if (string_field != null) {
            stmt.bindString(9, string_field);
        }
 
        Boolean boolean_field = entity.getBoolean_field();
        if (boolean_field != null) {
            stmt.bindLong(10, boolean_field ? 1L: 0L);
        }
 
        java.util.Date date_field = entity.getDate_field();
        if (date_field != null) {
            stmt.bindLong(11, date_field.getTime());
        }
    }

    @Override
    protected void attachEntity(Bean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bean readEntity(Cursor cursor, int offset) {
        Bean entity = new Bean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // int_field
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // long_field
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3), // short_field
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // float_field
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // double_field
            cursor.isNull(offset + 6) ? null : (byte) cursor.getShort(offset + 6), // byte_field
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // byte_array_field
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // string_field
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // boolean_field
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // date_field
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setInt_field(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLong_field(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setShort_field(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
        entity.setFloat_field(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setDouble_field(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setByte_field(cursor.isNull(offset + 6) ? null : (byte) cursor.getShort(offset + 6));
        entity.setByte_array_field(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setString_field(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBoolean_field(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setDate_field(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
